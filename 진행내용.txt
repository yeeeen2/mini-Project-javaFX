1일차
==오전==
주제선정
개발배경, 목적, 마인드맵
==오후==
일정조율
DB, 시퀀스 팀 나누기
DB&시퀀스 제작
UI구성

2일차
==오전==
DB&시퀀스&UI구성
==오후==
UI창 기본값 지정
UI 디자인

3일차
==오전==
UI디자인. 검토
UI id정하기
==오후==
이벤트구현 역할분담
이벤트구현
(패키지분류, 기능별분류, 메소드정리)

4일차(주말)
* 유저정보는 실시간갱신이 이루어져야한다. 메뉴선택창이 켜질때 유저정보를 같이 넘겨주는게 좋을거 같다.
* 그럴려면 Controller에 유저정보를 담아야하는게 아닌지?
* 창정보를 변경하려면 controller에 창을 담는다. 리스너는 service쪽에
* 전체적인 연결은 Controller로 하고 내부에 다른 창의 Controller를 넣어서 Controller로 움직이도록 구성.

1. 일단 메뉴창 open을 연결, 로그인-유저메인-메뉴선택 까지 연결함.
	?연결중에 controller통합때문에 NullPointerException오류를 많이 먹었다.
	?생성자에 setController해주기 + 메소드 동작시에도 set을 해주니 되긴 됐다.
	?왜 둘다 setController를 해줘야하는지 아직 모르겠다. -> 폼이 저장이 안돼서 그런건지..?
2. 뒤로가기버튼 연결(유저메인)
3. 창이 옮겨지면(켜지면) 이전창은 종료해준다.(자연스러운연결을 위해)

5일차(주말)
할일
1. 어드민impl짜기
기능별로 일단 짜놨고, 서버 연결 공부중(소켓이용예정)
2. DB정보입력
기초지식이 없다시피 한 상황에서 DB에 기본키, 외래키 입력하여 테이블 생성하기.
테스트값 넣기(유저정보, 메뉴4가지)
3. 어드민메인 구현하기
자바는 소켓프로그램을 이용하는데 소켓은 양방향 통신의 접속 포인트를 의미한다고 한다.
그 외에 네트워크를 구성하는 요소들(ip,포트,프로토콜,mac주소,연결유지 프로토콜) 숙지
자바로 서버와 클라이언트를 따로 코딩한 뒤 실행파일(exe) 제작하여 실행하면 각기 통신이 됨.
실행파일 만드는법 알아봄 >
1) 이클립스 file - export - java - runnable jar file - launch configuration(컴파일된 java코드) 과 내보낼 위치 설정
	-> JSmooth 로 변환(js파일을 같이 생성해서 배포해야 했기 때문에 사용x)
	-> Launch4j 로 변환 (jar 파일을 네이티브 윈도우 실행파일로 래핑하여 자연스러운 윈도우 앱 처럼 동작이 가능)
	Launch4j 사용결정.
2) Launch4j - output file(내보낼 위치)& jar(변환할jar위치) 선택 - Header부분에서 GUI,콘솔선택
- Single instance는 한개의 인스턴스를 사용할지 여부결정(기본값은 동시에 같은 프로그램을 여러개 실행 가능)
- jre는 실행파일을 실행하는 컴퓨터에 설치되어야한다.(버전은 맞추거나 번들가능)
- 톱니바퀴버튼을 눌러 xml파일 이름 설정하면 저장(gui만 해당) xml과 함께 배포!

// 유저메인 다 구현하기 -> 서버생성시 진행가능
// 메뉴선택 다 구현하기(급하지않음)

6일차
==오전==
서버생성 & 창 옮겨 테스트

[stream]
자바에서의 데이터는 Stream을 통해 입출력 된다. 자바에서 입출력을 수행하기 위해서는 데이터를 전송할 수 있는 무언가가 필요한데 이것을 Stream이라고 한다.
Stream은 단방향으로만 흘러가는 것을 말하는데 때문에 하나의 Stream으로 입력과 출력을 동시에 처리할 수 없다. 그래서 입력과 출력을 동시에 수행하려면 InputStream과 OutputStream, 총 두 개의 Stream이 필요하다.
inputStream

outputStream

[네트워크]
InetAddress : 호스트 이름과 ip주소를 보여줌
출처: https://ndb796.tistory.com/55?category=986634 [안경잡이개발자]
ExecutorService는 여러 개의 쓰레드를 효율적으로 관리하기 위한 대표적인 라이브러리입니다. Thread Pool로 쓰레드를 처리하게 되면 기본적인 쓰레드 숫자의 제한을 두기 때문에 갑작스런 Client 폭증에도 쓰레드의 수에는 제한이 있어 서버의 성능 저하를 방지할 수 있습니다. 한정된 자원을 '안정적으로' 관리하기 위한 대비책이죠.
쓰레드는 MVC모델중 C부분!
==오후==
팀원도움(창연결 방법, 창이 안뜨는 오류 해결, db입력)
서버-클라이언트 시퀀스 작성
구현에 필요한 collection형식 지정
어드민 메인 - 구매현황 list 연결 및 삭제 구현

7일차
==오전==
1. 유저정보 실시간연동
Timer & TimerTask 클래스는 Runnable인터페이스를 구현한다.(스레드)
이 클래스를 이용하기 위해서는 실제 작업을 수행하는 run메소드를 구현하는 하위클래스를 만들면 된다. 그것을 timer의 인스턴스에 붙이면 됨.

timer클래스를 만들고 구현하는 도중 nullpointException이 계속뜸.
이유? userInfor를 불러오는 시간이 폼이 셋팅되는 시간보다 빨라서?
->유저컨트롤러&컨트롤러&파람값&창생성시 서비스에 직접넣기 = 다안됌
->컨트롤러setter가 동작하는곳에 proc메소드를 두었더니 null포인트 사라짐
label에 타이머 연결 -> 연결은 되었으나 실시간 수정이 안됨. 오류가 계속 뜨는 상황
실시간은 listen로 받아오는것으로 알고 있기 때문에 찾아봤으나 없었음
자바스윙을 섞어서 써야하나 고민하다가 발견
->label.textProperty.addListener() 활용예정

급한대로 창연결부터 진행(시간충전, 결제, 재고관리, 회원관리)
메뉴선택창 연결 후 controller가 업데이트안되는 상황이 옴 왜그런지모름


8일차
1. 메뉴선택 리스트뷰로 변경하고 확인 누르면 창 따로 떠서 상품정보 불러오고 수량 확인 누르기.
새로운창에 spinner 사용하여 값 받기.
spinner는 SpinnerValueFactory()를 정의해주어야함
담은거 테이블뷰로 연동 테이블뷰<넣을 자료형>
테이블뷰를 가져오고 테이블뷰.getItems().get(컬럼번호) 로 컬럼을 가져온다.
그리고 테이블뷰에 넣은 자료형의 인스턴스들을 컬럼에 연결시켜준다.
이후 반복문을 돌려 arraylist를 테이블뷰.getItems().add(넣기) 로 넣어주면 끝.
(테이블뷰에서 만약 값 변동이 이루어졌을때 연동시켜주려면 자료형property 로 객체들을 생성+정의 해주어야한다)

-> 7일차에서 해결못한 연결문제(controller 연동이슈)를 해결했다.!
기존에 씬빌더로 controller를 연결해주면 initizable을 구현해주어야 했는데
씬빌더 적용 없이 컨트롤러를 삽입하면 init()의 코드를 직접 구현해서 넣어줘야 하는것이였다.
init에 필요한 것들(setController, 컨트롤 정의, 컨트롤이벤트구현 등)
컨트롤러의 생성자에는 DAO 혹은 service객체만 생성해준다!

java.lang.IllegalStateException : Not on FX application thread
JavaFX 의 UI 변경은 JavaFX Application Thread가 담당을 하게 되는데, 다른 Thread에서 UI를 변경하게 되면 아래와 같은 Exception 이 발생하게 됩니다.
이를 해결 하기 위해서는 JavaFX에서 제공하는 Platform.runLater() 메소드를 사용합니다.
Platform.runLater() 메소드는 UI를 변경하는 Thread를 생성해 JavaFX Application Thread 가 처리 할 수 있게 Queue에 등록하는 기능을 합니다.


9일차
==오전==
팀원 봐주기 + 완성된 팀원 코드 연결하기(연결하면서 부족한 부분 채움)

==오후==
합치는 도중 DB오류 잡기
Date오류 -> default sysdate로 필드바꿔버림. insert시 자동삽입
parent key오류 -> 테이블에 값 삽입시 참조하는 테이블 값이 없는 경우 & 부모클래스에 들어갈 수 있어야 하는데 부모 클래스의 범위를 넘어섰기 때문에 발생
배열과 해쉬맵으로 서버없이 login구현(좌석은 랜덤배정, 꽉차는경우 불가 알림)
사진오류 Invalid URL or resource not found ->경로로 사진을 찾지 못했을때. try-catch로 잡아준다.

10일차
코드 합치기 및 수정

11일차
코드 대부분 합침, 타이머 건들여보기, 팀원봐주기

12일차
타이머 제작 완료 Platform.runLater(); 를 사용해야 했음. 쓰레드 안에.
순서가 잘못되었던것.

13일차
팀원코드 재작성

14일차
코드 합치기 및 수정
오류검증